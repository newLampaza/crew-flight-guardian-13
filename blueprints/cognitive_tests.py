
from flask import Blueprint, jsonify, request
import sqlite3
import logging
import uuid
import json
import traceback
from datetime import datetime, timedelta
import random

# Setup logging
logger = logging.getLogger(__name__)

# Create blueprint
cognitive_bp = Blueprint('cognitive', __name__, url_prefix='/api')

# Helper functions
def get_db_connection():
    conn = sqlite3.connect('database/database.db')
    conn.row_factory = sqlite3.Row
    return conn

# Test session storage (in-memory for now)
test_sessions = {}

def generate_test_questions(test_type, count=5):
    """Generates questions for cognitive tests based on type"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if test_type == 'attention':
        question_types = ['difference', 'count', 'pattern', 'select', 'matrix_selection']
    elif test_type == 'memory':
        question_types = ['sequence', 'words', 'images', 'pairs', 'matrix']
    elif test_type == 'reaction':
        question_types = ['reaction', 'select', 'pattern', 'count', 'matrix_selection']
    elif test_type == 'cognitive':
        question_types = ['logic', 'math', 'pattern', 'cognitive', 'sequence']
    else:
        question_types = ['logic', 'math', 'pattern', 'cognitive', 'sequence']
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã count —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
    while len(question_types) < count:
        question_types.extend(question_types)
    
    questions = []
    for i in range(count):
        question_type = question_types[i % len(question_types)]
        questions.append(generate_question(question_type))
    
    return questions

def generate_question(question_type):
    """Generates a single question based on its type with improved content"""
    question_id = str(uuid.uuid4())
    
    if question_type == 'difference':
        # –¢–µ—Å—Ç –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–∏–π
        images = [
            'https://images.unsplash.com/photo-1488590528505-98d2b5aba04b',
            'https://images.unsplash.com/photo-1461749280684-dccba630e2f6'
        ]
        differences = random.choice([2, 3, 4, 5])
        correct_answer = f"{differences} –æ—Ç–ª–∏—á–∏—è"
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
        options = [f"{max(1, differences-1)} –æ—Ç–ª–∏—á–∏—è", 
                   f"{differences} –æ—Ç–ª–∏—á–∏—è", 
                   f"{differences+1} –æ—Ç–ª–∏—á–∏—è", 
                   f"{differences+2} –æ—Ç–ª–∏—á–∏—è"]
        random.shuffle(options)
        
        return {
            'id': question_id,
            'type': question_type,
            'question': '–ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
            'images': images,
            'options': options,
            'correct_answer': correct_answer,
            'time_limit': 30
        }
    
    elif question_type == 'count':
        # –¢–µ—Å—Ç –Ω–∞ –ø–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        symbols = ['#', '@', '$', '%', '&']
        target_symbol = random.choice(symbols)
        grid_size = 5
        grid = []
        count = 0
        
        for i in range(grid_size):
            row = []
            for j in range(grid_size):
                symbol = random.choice(symbols)
                if symbol == target_symbol:
                    count += 1
                row.append(symbol)
            grid.append(row)
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã —Ä–∞–∑
        if count == 0:
            x, y = random.randint(0, grid_size-1), random.randint(0, grid_size-1)
            grid[x][y] = target_symbol
            count = 1
        
        return {
            'id': question_id,
            'type': question_type,
            'question': f'–°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ {target_symbol} –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏',
            'grid': grid,
            'options': [str(count-1), str(count), str(count+1), str(count+2)],
            'correct_answer': str(count),
            'time_limit': 20
        }
    
    elif question_type == 'pattern':
        # –û—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        patterns = [
            {'sequence': ['‚≠ê', '‚ö°', '‚≠ê', '‚ö°', '‚≠ê'], 'next': '‚ö°'},
            {'sequence': ['üî¥', 'üîµ', 'üü¢', 'üî¥', 'üîµ'], 'next': 'üü¢'},
            {'sequence': ['1', '3', '5', '7', '9'], 'next': '11'},
            {'sequence': ['A', 'C', 'E', 'G', 'I'], 'next': 'K'}
        ]
        
        selected_pattern = random.choice(patterns)
        stimulus = selected_pattern['sequence']
        correct_answer = selected_pattern['next']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        wrong_answers = []
        all_symbols = ['‚≠ê', '‚ö°', 'üåô', '‚ö™', 'üî¥', 'üîµ', 'üü¢', 'üü°', 'X', 'Y', 'Z']
        
        if correct_answer.isdigit():
            wrong_answers = [str(int(correct_answer) + 2), str(int(correct_answer) - 2), 
                            str(int(correct_answer) + 4)]
        elif correct_answer in all_symbols:
            wrong_answers = [sym for sym in all_symbols if sym != correct_answer][:3]
        else:  # –±—É–∫–≤—ã
            alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
            idx = alphabet.find(correct_answer)
            if idx != -1:
                wrong_answers = [alphabet[(idx+1) % 26], alphabet[(idx+2) % 26], alphabet[(idx+3) % 26]]
            else:
                wrong_answers = ['M', 'P', 'T']
        
        options = [correct_answer] + wrong_answers[:3]
        random.shuffle(options)
        
        return {
            'id': question_id,
            'type': question_type,
            'question': '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∏ —É–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç',
            'stimulus': stimulus,
            'options': options,
            'correct_answer': correct_answer,
            'time_limit': 20
        }
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤ –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    # —á—Ç–æ–±—ã —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤ 
    # –¥—É–±–ª–∏—Ä—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    else:
        # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
        return {
            'id': question_id,
            'type': question_type,
            'question': '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–∏–ø–∞ ' + question_type,
            'options': ['–í–∞—Ä–∏–∞–Ω—Ç 1', '–í–∞—Ä–∏–∞–Ω—Ç 2', '–í–∞—Ä–∏–∞–Ω—Ç 3', '–í–∞—Ä–∏–∞–Ω—Ç 4'],
            'correct_answer': '–í–∞—Ä–∏–∞–Ω—Ç 2',
            'time_limit': 20
        }

def calculate_results(questions, answers, test_type, time_elapsed):
    """–†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    correct = 0
    correct_answers = 0
    mistakes = []
    question_details = []
    total_response_time = 0
    response_times_by_type = {}
    accuracy_by_type = {}
    
    for q in questions:
        question_type = q['type']
        user_answer = answers.get(q['id'], '')
        response_time = float(answers.get(f"{q['id']}_time", 0))
        
        if not user_answer:
            user_answer = "–Ω–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        is_correct = user_answer.strip() == q['correct_answer'].strip()
        
        # –°–±–æ—Ä –¥–µ—Ç–∞–ª–µ–π –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
        if question_type not in response_times_by_type:
            response_times_by_type[question_type] = []
            accuracy_by_type[question_type] = {'correct': 0, 'total': 0}
            
        response_times_by_type[question_type].append(response_time)
        accuracy_by_type[question_type]['total'] += 1
        if is_correct:
            accuracy_by_type[question_type]['correct'] += 1
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É
        question_details.append({
            'question_type': question_type,
            'response_time': response_time,
            'is_correct': is_correct,
            'question': q['question'],
            'user_answer': user_answer,
            'correct_answer': q['correct_answer']
        })
        
        if is_correct:
            correct += 1
            total_response_time += response_time
        else:
            mistakes.append({
                'question': q['question'],
                'user_answer': user_answer,
                'correct_answer': q['correct_answer'],
                'question_type': question_type
            })
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫
    total_questions = len(questions)
    score = (correct / total_questions) * 100 if total_questions > 0 else 0
    avg_response_time = total_response_time / correct if correct > 0 else 0
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
    performance_by_type = {}
    for qtype in accuracy_by_type:
        total = accuracy_by_type[qtype]['total']
        correct_count = accuracy_by_type[qtype]['correct']
        avg_time = sum(response_times_by_type[qtype]) / len(response_times_by_type[qtype]) if response_times_by_type[qtype] else 0
        
        performance_by_type[qtype] = {
            'accuracy': (correct_count / total) * 100 if total > 0 else 0,
            'average_time': avg_time
        }
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
    error_analysis = {}
    for m in mistakes:
        question_type = m.get('question_type', 'unknown')
        if question_type not in error_analysis:
            error_analysis[question_type] = 0
        error_analysis[question_type] += 1
    
    return {
        'score': round(score, 1),
        'total_questions': total_questions,
        'correct_answers': correct,
        'mistakes': mistakes,
        'time_elapsed': time_elapsed,
        'details': {
            'total_questions': total_questions,
            'correct_answers': correct,
            'error_analysis': error_analysis,
            'question_details': question_details,
            'average_response_time': avg_response_time,
            'performance_by_type': performance_by_type
        }
    }

# Import token_required from auth blueprint
def get_token_required():
    from blueprints.auth import get_token_required
    return get_token_required()

# Routes
@cognitive_bp.route('/tests/start', methods=['POST'])
def start_test():
    token_required = get_token_required()
    
    @token_required
    def _start_test(current_user):
        try:
            test_type = request.json.get('test_type')
            if not test_type:
                return jsonify({'error': '–¢–∏–ø —Ç–µ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
                
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤)
            questions = generate_test_questions(test_type, count=10)
            
            if not questions or len(questions) == 0:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞'}), 500
                
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            test_id = str(uuid.uuid4())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
            test_sessions[test_id] = {
                'employee_id': current_user['employee_id'],
                'test_type': test_type,
                'start_time': datetime.now().isoformat(),
                'questions': questions,
                'answers': {}
            }
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
            return jsonify({
                'test_id': test_id,
                'questions': questions,
                'current_question': 0,
                'time_limit': 300,  # 5 –º–∏–Ω—É—Ç –æ–±—â–∏–π –ª–∏–º–∏—Ç
                'total_questions': len(questions)
            })
        except Exception as e:
            logger.error(f"Error starting test: {traceback.format_exc()}")
            return jsonify({'error': str(e)}), 500
            
    return _start_test()

@cognitive_bp.route('/tests/submit', methods=['POST'])
def submit_test():
    token_required = get_token_required()
    
    @token_required
    def _submit_test(current_user):
        try:
            data = request.get_json()
            test_id = data.get('test_id')
            answers = data.get('answers', {})
            
            if not test_id or test_id not in test_sessions:
                return jsonify({'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID —Ç–µ—Å—Ç–∞'}), 400
                
            test_session = test_sessions[test_id]
            
            if test_session['employee_id'] != current_user['employee_id']:
                return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
                
            start_time = datetime.fromisoformat(test_session['start_time'])
            end_time = datetime.now()
            duration = int((end_time - start_time).total_seconds())
            
            # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
            results = calculate_results(
                test_session['questions'], 
                answers, 
                test_session['test_type'], 
                duration
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —Ç–µ—Å—Ç–∞ (30 –º–∏–Ω—É—Ç)
            cooldown_end = end_time + timedelta(minutes=30)
            cooldown_end_str = cooldown_end.isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO CognitiveTests 
                (employee_id, test_type, test_date, score, duration, details, cooldown_end)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                current_user['employee_id'],
                test_session['test_type'],
                end_time.isoformat(),
                results['score'],
                duration,
                json.dumps(results),
                cooldown_end_str
            ))
            conn.commit()
            test_id_db = cursor.lastrowid
            conn.close()
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
            del test_sessions[test_id]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return jsonify({
                'score': results['score'],
                'test_id': test_id_db,
                'total_questions': results['total_questions'],
                'correct_answers': results['correct_answers'],
                'cooldown_end': cooldown_end_str
            })
        except Exception as e:
            logger.error(f"Error submitting test: {traceback.format_exc()}")
            return jsonify({'error': str(e)}), 500
            
    return _submit_test()

@cognitive_bp.route('/tests/results/<int:test_id>', methods=['GET'])
def get_test_results(test_id):
    token_required = get_token_required()
    
    @token_required
    def _get_test_results(current_user, test_id):
        conn = None
        try:
            conn = get_db_connection()
            test = conn.execute('''
                SELECT * FROM CognitiveTests 
                WHERE test_id = ? AND employee_id = ?
            ''', (test_id, current_user['employee_id'])).fetchone()
            
            if not test:
                return jsonify({'error': '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞ –∏–∑ JSON –≤ —Å–ª–æ–≤–∞—Ä—å
            details = json.loads(test['details'])
            
            result = {
                'test_id': test['test_id'],
                'test_date': test['test_date'],
                'test_type': test['test_type'],
                'score': test['score'],
                'duration': test['duration'],
                'details': details,
                'mistakes': details.get('mistakes', []),
                'cooldown_end': test['cooldown_end']
            }
            
            return jsonify(result)
        except Exception as e:
            logger.error(f"Error getting test results: {str(e)}")
            return jsonify({"error": str(e)}), 500
        finally:
            if conn:
                conn.close()
                
    return _get_test_results(test_id)

@cognitive_bp.route('/cognitive-tests', methods=['GET'])
def get_cognitive_tests():
    token_required = get_token_required()
    
    @token_required
    def _get_cognitive_tests(current_user):
        conn = None
        try:
            conn = get_db_connection()
            tests = conn.execute('''
                SELECT test_id, test_type, test_date, score, 
                       duration, details, cooldown_end
                FROM CognitiveTests 
                WHERE employee_id = ? 
                ORDER BY test_date DESC
            ''', (current_user['employee_id'],)).fetchall()
            
            return jsonify([dict(test) for test in tests])
        except Exception as e:
            logger.error(f"Error getting cognitive tests: {str(e)}")
            return jsonify({"error": str(e)}), 500
        finally:
            if conn:
                conn.close()
                
    return _get_cognitive_tests()

@cognitive_bp.route('/tests/cooldown/<string:test_type>', methods=['GET'])
@cognitive_bp.route('/cognitive-tests/cooldown/<string:test_type>', methods=['GET'])
def check_test_cooldown(test_type):
    token_required = get_token_required()
    
    @token_required
    def _check_test_cooldown(current_user):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —Ç–µ—Å—Ç–∞"""
        conn = get_db_connection()
        try:
            last_test = conn.execute('''
                SELECT test_date 
                FROM CognitiveTests 
                WHERE employee_id = ? 
                  AND test_type = ?
                ORDER BY test_date DESC 
                LIMIT 1
            ''', (current_user['employee_id'], test_type)).fetchone()
            
            if not last_test:
                return jsonify({'in_cooldown': False})
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            last_time = datetime.fromisoformat(last_test['test_date'])
            cooldown_seconds = 600  # 10 –º–∏–Ω—É—Ç
            now = datetime.now()
            
            if (now - last_time).total_seconds() < cooldown_seconds:
                cooldown_end = last_time + timedelta(seconds=cooldown_seconds)
                return jsonify({
                    'in_cooldown': True,
                    'cooldown_end': cooldown_end.isoformat()
                })
            
            return jsonify({'in_cooldown': False})
            
        except Exception as e:
            logger.error(f"Error in test cooldown check: {str(e)}")
            return jsonify({'error': str(e)}), 500
        finally:
            conn.close()
            
    return _check_test_cooldown()

@cognitive_bp.route('/cognitive-tests/<int:test_id>/results', methods=['GET'])
def get_test_details(test_id):
    token_required = get_token_required()
    
    @token_required
    def _get_test_details(current_user):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Å—Ç–∞ –∏ –æ—à–∏–±–æ–∫"""
        conn = get_db_connection()
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            test = conn.execute('''
                SELECT * FROM CognitiveTests
                WHERE test_id = ? 
                AND employee_id = ?
            ''', (test_id, current_user['employee_id'])).fetchone()

            if not test:
                return jsonify({"error": "Test not found"}), 404

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
            mistakes = conn.execute('''
                SELECT 
                    question,
                    user_answer,
                    correct_answer
                FROM TestMistakes
                WHERE test_id = ?
            ''', (test_id,)).fetchall()

            response_data = {
                "test": dict(test),
                "mistakes": [dict(mistake) for mistake in mistakes],
                "analysis": {
                    "total_questions": len(mistakes) + test['score']/100*(len(mistakes)/(1-test['score']/100)) if test['score'] < 100 else len(mistakes),
                    "correct_answers": round(test['score']/100 * (len(mistakes)/(1-test['score']/100))) if test['score'] < 100 else "N/A"
                }
            }

            return jsonify(response_data)

        except sqlite3.Error as e:
            logger.error(f"Database error: {str(e)}")
            return jsonify({"error": "Database operation failed"}), 500
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            return jsonify({"error": "Internal server error"}), 500
        finally:
            conn.close()
            
    return _get_test_details()
